{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "002aabef-a16d-4c85-a2c7-84d5ca699ed9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e5f3bcd7-6b64-433b-b51e-6ea1028a9fea",
   "metadata": {},
   "outputs": [],
   "source": [
    "masa = 47.5\n",
    "edad = 122\n",
    "masa = masa * 2\n",
    "edad = edad - 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ab6fdd9c-aa4b-4ec0-a544-64fae63a3ac2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "95.0 102 Rosa Lissette Toledo-Magana\n"
     ]
    }
   ],
   "source": [
    "print(masa,edad,name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "754dba6e-07b8-4ae4-9b57-e705a6f87bb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(name)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "a29c55e5-771f-44bf-9560-ac5925fa9bfc",
   "metadata": {},
   "source": [
    "name = \"Rosa Lissette Toledo-Magana\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "fadbea0d-fc6b-45e6-a81e-dce6a1df094d",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.random.normal(size=(15,2,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f0bc3bdf-82b1-496a-ba0d-dee0b0684fba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[ 0.48312994]\n",
      "  [ 2.01107672]]\n",
      "\n",
      " [[ 0.36058962]\n",
      "  [-1.18568561]]\n",
      "\n",
      " [[-0.15544264]\n",
      "  [-1.03624912]]\n",
      "\n",
      " [[ 1.1296863 ]\n",
      "  [ 2.09647789]]\n",
      "\n",
      " [[ 0.8859208 ]\n",
      "  [-0.03629456]]\n",
      "\n",
      " [[ 0.67483433]\n",
      "  [-1.01461373]]\n",
      "\n",
      " [[-0.02845244]\n",
      "  [-0.14250976]]\n",
      "\n",
      " [[-1.80567739]\n",
      "  [-0.5709268 ]]\n",
      "\n",
      " [[-0.00448946]\n",
      "  [ 1.45849216]]\n",
      "\n",
      " [[-0.14251637]\n",
      "  [ 0.50978183]]\n",
      "\n",
      " [[ 1.00266733]\n",
      "  [ 0.63101163]]\n",
      "\n",
      " [[-1.43011254]\n",
      "  [ 0.18123508]]\n",
      "\n",
      " [[ 0.74939014]\n",
      "  [ 0.00607584]]\n",
      "\n",
      " [[ 0.74321933]\n",
      "  [ 0.22702974]]\n",
      "\n",
      " [[-0.54411491]\n",
      "  [-0.16832896]]]\n"
     ]
    }
   ],
   "source": [
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e41a6542-5e1c-4194-8623-73d839fce952",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a\n"
     ]
    }
   ],
   "source": [
    "nombre = 'Rosa Lissette Toledo-Magana'\n",
    "print(nombre[3])\n",
    "#print(nombre[-6:])\n",
    "#print(nombre[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3c1a614a-8159-4f0d-bb42-4403875476e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Magana\n"
     ]
    }
   ],
   "source": [
    "nombre = 'Rosa Lissette Toledo-Magana'\n",
    "#print(nombre[3])\n",
    "print(nombre[-6:])\n",
    "#print(nombre[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fb330526-7888-427a-b2a7-37479a20bb4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rosa \n"
     ]
    }
   ],
   "source": [
    "nombre = 'Rosa Lissette Toledo-Magana'\n",
    "#print(nombre[3])\n",
    "#print(nombre[-6:])\n",
    "print(nombre[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "2f749db4-4926-40c7-ace5-b3284375861a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = [\n",
    "    ['A','B','C'],\n",
    "    ['D','E','F'],\n",
    "    ['G','H','I']\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7e007ab4-9d48-41d4-840c-2b3dc890845a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]\n"
     ]
    }
   ],
   "source": [
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b3a4f1de-b42a-4948-9ff3-ef146a9311de",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=np.matrix(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6239937b-4f0b-436f-88d0-48991d8ced1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([['A', 'B', 'C'],\n",
       "        ['D', 'E', 'F'],\n",
       "        ['G', 'H', 'I']], dtype='<U1')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d8409d3b-d57b-4f6f-94c1-a7bcc14da417",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['A' 'B' 'C']\n",
      " ['D' 'E' 'F']\n",
      " ['G' 'H' 'I']]\n"
     ]
    }
   ],
   "source": [
    "print(data[:,:])#imprimos la matriz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "51ae7927-e472-418f-804b-b192d5454000",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F\n"
     ]
    }
   ],
   "source": [
    "print(data[1,2]) #seleccionamos elemento en fila 1 y columna 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "2cc4c9fd-116d-411d-849e-2bf8d1c31ea6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C\n"
     ]
    }
   ],
   "source": [
    "print(data[0,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "44c029a8-f476-4edb-9553-523c6e6331a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 3)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.shape(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a88ec887-92de-411f-ac29-1c51cacb32ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_n = [\n",
    "    [1,2,3],\n",
    "    [4,5,6],\n",
    "    [7,8,9]\n",
    "]\n",
    "data_n = np.matrix (data_n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "bad13c44-bed1-4c54-81ea-7a47217149e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n"
     ]
    }
   ],
   "source": [
    "print(data_n[:,:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c33e14ab-bb53-4535-b47a-f957918c1d64",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[7, 8, 9]])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.max(data_n,axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "421357a7-10bc-46de-bbed-ce48373b9f56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[1, 2, 3]])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.min(data_n,axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e6e854a1-b06c-4800-a09a-6e965d0d20fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[1],\n",
       "        [4],\n",
       "        [7]])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.min(data_n,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "66ff3152-6fd8-4f8b-8a44-8825818c190d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.min(data_n,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "71cdb8cf-2948-4b95-9566-e907b939df14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.0"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(data_n,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "88dfcfd7-2c3c-4b7e-b035-171c25adebbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "print(np.min(data_n))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "db122018-20fa-4ab8-a465-ccfee6fbdbc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "num = np.min(data_n)\n",
    "print(str(num))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "bd9057e7-d785-4ff2-b576-a48dfb79fac7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 is not greater than 5\n",
      "done\n"
     ]
    }
   ],
   "source": [
    "num = np.min(data_n)\n",
    "if num >= 5:\n",
    "    print(str(num), 'is greater than 5')\n",
    "else:\n",
    "    print(str(num), 'is not greater than 5')\n",
    "print('done')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ddbb4380-6657-40e8-bd5a-fb2b572ff148",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "num = np.max(data_n)\n",
    "print(str(num))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "1c616a92-0790-466e-956c-396883ce0571",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 is greater than 5\n",
      "done\n"
     ]
    }
   ],
   "source": [
    "num = np.max(data_n)\n",
    "if num >= 5:\n",
    "    print(str(num), 'is greater than 5')\n",
    "else:\n",
    "    print(str(num), 'is not greater than 5')\n",
    "print('done')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "a23de3db-9e30-49a0-a4ec-099fdcf923c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 is greater than 5\n",
      "done\n"
     ]
    }
   ],
   "source": [
    "num = np.max(data_n)\n",
    "if num >= 5:\n",
    "    print(str(num), 'is greater than 5')\n",
    "elif num ==5:\n",
    "    print('No se cumple')\n",
    "else:\n",
    "    print(str(num), 'is not greater than 5')\n",
    "print('done')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "4901f612-c147-4eba-9ee3-577312b8f70f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.0 is greater than 5\n",
      "done\n"
     ]
    }
   ],
   "source": [
    "num = np.mean(data_n)\n",
    "if num >= 5:\n",
    "    print(str(num), 'is greater than 5')\n",
    "elif num ==5:\n",
    "    print('No se cumple')\n",
    "else:\n",
    "    print(str(num), 'is not greater than 5')\n",
    "print('done')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "19cbeaa8-3fd8-416b-a156-77e4a1958551",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax = plt.plot(a[0,:], color='darkblue', \n",
    "              linewidth='1.5', linestyle='dashed')\n",
    "plt.xlabel('axis x')\n",
    "plt.ylabel('axis y')\n",
    "plt.title ('Figura de prueba')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a6d11f2-b5b5-42f3-a3ed-6f8ab83c9106",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "922241e0-b4c3-4d79-8e47-30ce34809acb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba6dbadd-628e-441f-bf59-7e51c4212f22",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d5bbd34-3509-4432-92b6-1a8c5f397efb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1efe0679-ddd7-427a-95f6-e5f7262787cf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f842508-5f5b-4ab1-90c1-205786b801f2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base]",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
